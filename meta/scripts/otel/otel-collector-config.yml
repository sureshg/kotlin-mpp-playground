receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: 'node_exporter'
          static_configs:
            - targets: [ 'node_exporter:9100' ]  # Default node_exporter port
          scrape_interval: 10s

processors:
  batch:
    send_batch_size: 100000
    timeout: 5s
  memory_limiter:
    check_interval: 2s
    limit_mib: 1800
    spike_limit_mib: 500
  resourcedetection/system:
    detectors: [ "system" ]
    system:
      hostname_sources: [ "os" ]
  resource:
    attributes:
      - key: service.name
        value: "serviceName"
        action: upsert

exporters:
  debug:
  clickhouse:
    endpoint: tcp://clickhouse:9000
    database: otel
    ttl: 12h
    create_schema: true
    logs_table_name: otel_logs
    traces_table_name: otel_traces
    timeout: 10s
    sending_queue:
      queue_size: 100
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

    # otlphttp/traces:
    #   endpoint: http://localhost:4418
    #   tls:
    #     insecure: true
    # debug/logs:
    #   verbosity: detailed

extensions:
  health_check:
  pprof:
  zpages:

service:
  extensions: [ pprof, zpages, health_check ]
  telemetry:
    traces:
    metrics:
    logs:
  pipelines:
    logs:
      receivers: [ otlp ]
      processors: [ memory_limiter, resourcedetection/system, resource, batch ]
      exporters: [ clickhouse ]
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, resourcedetection/system, resource, batch ]
      exporters: [ clickhouse ]
    metrics:
      receivers: [ otlp ]
      processors: [ memory_limiter, resourcedetection/system, resource, batch ]
      exporters: [ clickhouse ]
      # exporters: [otlphttp/metrics,debug/metrics]