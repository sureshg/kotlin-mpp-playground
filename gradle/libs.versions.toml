[versions]
java                           = "22"
kotlin                         = "1.9.20-RC"
kotlin-ksp                     = "1.9.20-RC-1.0.13"
kotlin-jvmtarget               = "21"
kotlin-dsl-jvmtarget           = "17"
kotlin-api-version             = "1.9"
kotlin-lang-version            = "1.9"
gradle                         = "8.4"
node-version                   = "20.6.1"
java-vendor                    = "Oracle"
java-jvmArguments              = "--enable-preview"
java-addModules                = "jdk.incubator.vector"

# Additional metadata
group                          = "dev.suresh"
app-mainclass                  = "dev.suresh.AppKt"
dev-name                       = "sureshg"
dev-email                      = "email@suresh.dev"
org-name                       = "suresh.dev"
org-url                        = "https://suresh.dev"

# Gradle Dependencies Versions
kotlinx-kover                  = "0.7.4"
kotlinx-io                     = "0.3.0"
kotlinx-atomicfu               = "0.22.0"
kotlinx-coroutines             = "1.7.3"
kotlinx-datetime               = "0.4.1"
kotlinx-serialization          = "1.6.0"
kotlinx-collections-immutable  = "0.3.6"
kotlinx-lincheck               = "2.23"
kotlinx-html                   = "0.9.1"
kotlinx-benchmark              = "0.4.9"
kotlinx-metadata               = "0.7.0"
kotlinx-reflect-lite           = "1.1.0"
kotlinx-bincompat              = "0.13.2"
kotlin-wrappers                = "1.0.0-pre.632"
kotlin-redacted                = "1.7.0-alpha01"
ksp-auto-service               = "1.1.0"
gradle-kotlin-dsl              = "4.1.2"
zip-prefixer                   = "0.3.1"
ajalt-mordant                  = "2.2.0"
ajalt-clikt                    = "4.1.0"
ajalt-colormath                = "3.3.2"
compose-routing                = "0.2.12"
classgraph                     = "4.8.161"
cache4k                        = "0.11.0"
dokka                          = "1.9.0"
intellij-coverage              = "1.0.733"
intellij-markdown              = "0.5.2"
jgit                           = "6.5.0.202303070854-r"
jte                            = "3.1.2"
jimfs                          = "1.3.0"
junit                          = "5.10.0"
koin                           = "3.4.1"
kotest                         = "5.7.1"
mockk                          = "1.13.8"
mokkery                        = "1.9.10-1.3.0"
powerassert                    = "0.13.0"
slf4j                          = "2.0.9"
logback                        = "1.4.11"
log4j                          = "3.0.0-alpha1"
jmh                            = "1.37"
ktfmt                          = "0.46"
google-javaformat              = "1.18.1"
palantir-javaformat            = "2.38.0"
google-auto-service            = "1.1.1"
google-tink                    = "1.10.0"
graalvm                        = "23.0.1"
rsocket                        = "0.15.4"
jctools                        = "4.0.1"
benasher44-uuid                = "0.8.1"
kotlinx-uuid                   = "0.0.20"
kotlin-codepoints              = "0.6.1"
kotlin-logging                 = "5.1.0"
kotlin-bignum                  = "0.3.8"
kotlin-diff                    = "0.4.0"
kotlin-retry                   = "1.0.9"
uri-kmp                        = "0.0.15"
cash-turbine                   = "1.0.0"
kmp-store5                     = "5.0.0-beta01"
kmp-settings                   = "1.1.0"
parsus                         = "0.6.0"
java-keyring                   = "1.0.3"
java-keychain                  = "1.1.0"
webjars-xterm                  = "5.1.0"
ktor                           = "2.3.5"
ktor-cohort                    = "2.2.1"
arrow-suspendapp               = "0.4.1-alpha.5"
kobweb                         = "0.13.9"
exposed                        = "0.44.0"
postgresql                     = "42.6.0"
hikariCP                       = "5.0.1"
h2                             = "2.2.220"
micrometer                     = "1.11.5"
swagger-ui                     = "5.1.3"
hoplite                        = "2.8.0-RC1"
config4k                       = "0.6.0"
shedlock                       = "5.7.0"
sherlock                       = "0.4.19"
expiringmap                    = "0.5.10"
apache-commons-imaging         = "1.0-alpha3"
testcontainers                 = "1.19.1"
kubernetes-client              = "18.0.1"
reflect-typeparamresolver      = "1.0.2"
reflect-typetools              = "0.6.3"
compose-icons                  = "1.1.0"
compose-html-lazy-layouts      = "0.1.0"

# NPM Dependencies
npm-highlightjs                = "11.8.0"
npm-kotlin-playground          = "1.28.0"
npm-xtermjs                    = "5.2.1"
npm-vega-lite                  = "5.13.0"
npm-jsjoda-tz                  = "2.18.0"

# Plugin versions
benmanes                       = "0.49.0"
foojay-resolver                = "0.7.0"
gradle-enterprise              = "3.15.1"
nexus-publish                  = "2.0.0-rc-1"
shadow                         = "8.1.1"
spotless                       = "6.22.0"
semver-plugin                  = "0.5.0-rc.5"
taskinfo                       = "2.1.0"
dependency-analysis            = "1.25.0"
best-practices-plugin          = "0.10"
graalvm-nativeimage            = "0.9.27"
github-depgraph                = "0.1.0"
github-changelog               = "2.0.0"
wire-plugin                    = "4.8.0"
poko-plugin                    = "0.14.0"
buildkonfig                    = "0.13.3"
akkurate                       = "0.1.0"
gmazzo-buildconfig             = "3.1.0"
cyclonedx-plugin               = "1.7.4"
modulegraph                    = "0.5.0"
jetbrains-compose              = "1.4.3"
jetbrains-compose-compiler     = "1.5.2"
cash-molecule                  = "1.2.1"
npm-publish-plugin             = "3.4.1"
exposed-plugin                 = "0.2.1"
jib-plugin                     = "3.4.0"
jib-nativeimage-extn           = "0.1.0"
includegit-plugin              = "0.1.6"


[libraries]
# External plugins for precompiled script plugins
build-kotlin                         = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin"                       , version.ref = "kotlin"}
build-kotlin-noarg                   = { module = "org.jetbrains.kotlin:kotlin-noarg"                               , version.ref = "kotlin"}
build-kotlin-allopen                 = { module = "org.jetbrains.kotlin:kotlin-allopen"                             , version.ref = "kotlin"}
build-kotlinx-serialization          = { module = "org.jetbrains.kotlin:kotlin-serialization"                       , version.ref = "kotlin"}
build-kotlinx-atomicfu               = { module = "org.jetbrains.kotlinx:atomicfu-gradle-plugin"                    , version.ref = "kotlinx-atomicfu"}
build-kotlinx-benchmark              = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-plugin"                  , version.ref = "kotlinx-benchmark"}
build-kotlin-dsl                     = { module = "org.gradle.kotlin:gradle-kotlin-dsl-plugins"                     , version.ref = "gradle-kotlin-dsl"}
build-dokka-plugin                   = { module = "org.jetbrains.dokka:dokka-gradle-plugin"                         , version.ref = "dokka"}
build-dokka-base                     = { module = "org.jetbrains.dokka:dokka-base"                                  , version.ref = "dokka"}
build-kotlin-ksp                     = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin"         , version.ref = "kotlin-ksp"}
build-powerassert                    = { module = "com.bnorm.power:kotlin-power-assert-gradle"                      , version.ref = "powerassert"}
build-redacted-plugin                = { module = "dev.zacsweers.redacted:redacted-compiler-plugin-gradle"          , version.ref = "kotlin-redacted"}
build-benmanesversions               = { module = "com.github.ben-manes:gradle-versions-plugin"                     , version.ref = "benmanes"}
build-gradle-enterprise              = { module = "com.gradle.enterprise:com.gradle.enterprise.gradle.plugin"       , version.ref = "gradle-enterprise" }
build-jte-plugin                     = { module = "gg.jte:jte-gradle-plugin"                                        , version.ref = "jte"}
build-nexus-plugin                   = { module = "io.github.gradle-nexus:publish-plugin"                           , version.ref = "nexus-publish"}
build-spotless-plugin                = { module = "com.diffplug.spotless:spotless-plugin-gradle"                    , version.ref = "spotless"}
build-shadow-plugin                  = { module = "com.github.johnrengelman:shadow"                                 , version.ref = "shadow"}
build-taskinfo                       = { module = "org.barfuin.gradle.taskinfo:gradle-taskinfo"                     , version.ref = "taskinfo" }
build-dependencyanalysis             = { module = "com.autonomousapps:dependency-analysis-gradle-plugin"            , version.ref = "dependency-analysis" }
build-bestpractices-plugin           = { module = "com.autonomousapps:plugin-best-practices-plugin"                 , version.ref = "best-practices-plugin" }
build-semver-plugin                  = { module = "com.javiersc.semver:semver-gradle-plugin"                        , version.ref = "semver-plugin" }
build-zip-prefixer                   = { module = "net.e175.klaus:zip-prefixer"                                     , version.ref = "zip-prefixer" }
build-foojay-resolver                = { module = "org.gradle.toolchains:foojay-resolver"                           , version.ref = "foojay-resolver" }
build-cyclonedx-plugin               = { module = "org.cyclonedx:cyclonedx-gradle-plugin"                           , version.ref = "cyclonedx-plugin" }
build-kotlinx-kover                  = { module = "org.jetbrains.kotlinx:kover-gradle-plugin"                       , version.ref = "kotlinx-kover" }
build-nativeimage-plugin             = { module = "org.graalvm.buildtools:native-gradle-plugin"                     , version.ref = "graalvm-nativeimage"}
build-github-depgraph                = { module = "org.gradle:github-dependency-graph-gradle-plugin"                , version.ref = "github-depgraph"}
build-wire-plugin                    = { module = "com.squareup.wire:wire-gradle-plugin"                            , version.ref = "wire-plugin"}
build-poko-plugin                    = { module = "dev.drewhamilton.poko:poko-gradle-plugin"                        , version.ref = "poko-plugin"}
build-kotlinx-bincompat              = { module = "org.jetbrains.kotlinx.binary-compatibility-validator:org.jetbrains.kotlinx.binary-compatibility-validator.gradle.plugin" , version.ref = "kotlinx-bincompat"}
build-buildkonfig-plugin             = { module = "com.codingfeline.buildkonfig:buildkonfig-gradle-plugin"          , version.ref = "buildkonfig"}
build-gmazzo-buildconfig             = { module = "com.github.gmazzo.buildconfig:plugin"                            , version.ref = "gmazzo-buildconfig"}
build-mokkery-plugin                 = { module = "dev.mokkery:mokkery-gradle"                                      , version.ref = "mokkery"}
build-cash-molecule-plugin           = { module = "app.cash.molecule:molecule-gradle-plugin"                        , version.ref = "cash-molecule"}
build-modulegraph-plugin             = { module = "dev.iurysouza:modulegraph"                                       , version.ref = "modulegraph"}
build-jetbrains-compose-mpp          = { module = "org.jetbrains.compose:compose-gradle-plugin"                     , version.ref = "jetbrains-compose"}
build-jetbrains-compose-runtime      = { module = "org.jetbrains.compose.runtime:runtime"                           , version.ref = "jetbrains-compose"}
build-jetbrains-compose-compiler     = { module = "org.jetbrains.compose.compiler:compiler"                         , version.ref = "jetbrains-compose-compiler"}
build-npm-publish-plugin             = { module = "dev.petuska:npm-publish-gradle-plugin"                           , version.ref = "npm-publish-plugin"}
build-exposed-plugin                 = { module = "gradle.plugin.com.jetbrains.exposed.gradle:plugin"               , version.ref = "exposed-plugin"}
build-intellij-coverage              = { module = "org.jetbrains.intellij.deps:intellij-coverage-reporter"          , version.ref = "intellij-coverage" }
build-github-changelog               = { module = "org.hildan.gradle:gradle-github-changelog"                       , version.ref = "github-changelog" }
build-jimfs                          = { module = "com.google.jimfs:jimfs"                                          , version.ref = "jimfs" }
build-jib-plugin                     = { module = "com.google.cloud.tools:jib-gradle-plugin"                        , version.ref = "jib-plugin" }
build-jib-nativeimage-extn           = { module = "com.google.cloud.tools:jib-native-image-extension-gradle"        , version.ref = "jib-nativeimage-extn" }
build-includegit-plugin              = { module = "me.champeau.gradle.includegit:plugin"                            , version.ref = "includegit-plugin" }

# Gradle Dependencies
kotlin-bom                           = { module = "org.jetbrains.kotlin:kotlin-bom"                                 , version.ref = "kotlin"}
kotlin-stdlib                        = { module = "org.jetbrains.kotlin:kotlin-stdlib"                              , version.ref = "kotlin"}
kotlin-reflect                       = { module = "org.jetbrains.kotlin:kotlin-reflect"                             , version.ref = "kotlin"}
kotlin-test                          = { module = "org.jetbrains.kotlin:kotlin-test"                                , version.ref = "kotlin"}
kotlin-test-junit                    = { module = "org.jetbrains.kotlin:kotlin-test-junit"                          , version.ref = "kotlin"}
kotlinx-metadata-jvm                 = { module = "org.jetbrains.kotlinx:kotlinx-metadata-jvm"                      , version.ref = "kotlinx-metadata"}
kotlinx-coroutines-core              = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core"                   , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-test              = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test"                   , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-slf4j             = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j"                  , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-debug             = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug"                  , version.ref = "kotlinx-coroutines"}
kotlinx-serialization-core           = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core"                , version.ref = "kotlinx-serialization"}
kotlinx-serialization-json           = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json"                , version.ref = "kotlinx-serialization"}
kotlinx-datetime                     = { module = "org.jetbrains.kotlinx:kotlinx-datetime"                          , version.ref = "kotlinx-datetime"}
kotlinx-atomicfu                     = { module = "org.jetbrains.kotlinx:atomicfu"                                  , version.ref = "kotlinx-atomicfu"}
kotlinx-io-core                      = { module = "org.jetbrains.kotlinx:kotlinx-io-core"                           , version.ref = "kotlinx-io"}
kotlinx-lincheck                     = { module = "org.jetbrains.kotlinx:lincheck"                                  , version.ref = "kotlinx-lincheck"}
kotlinx-reflect-lite                 = { module = "org.jetbrains.kotlinx:kotlinx.reflect.lite"                      , version.ref = "kotlinx-reflect-lite"}
kotlinx-collections-immutable        = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable"             , version.ref = "kotlinx-collections-immutable"}
kotlinx-html                         = { module = "org.jetbrains.kotlinx:kotlinx-html"                              , version.ref = "kotlinx-html"}
kotlinx-bench-runtime                = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-runtime"                 , version.ref = "kotlinx-benchmark"}
kotlin-ksp-api                       = { module = "com.google.devtools.ksp:symbol-processing-api"                   , version.ref = "kotlin-ksp"}
kotlin-redacted-annotations          = { module = "dev.zacsweers.redacted:redacted-compiler-plugin-annotations"     , version.ref = "kotlin-redacted"}

ktor-bom                             = { module = "io.ktor:ktor-bom"                                                , version.ref = "ktor"}
ktor-serialization                   = { module = "io.ktor:ktor-serialization"                                      , version.ref = "ktor"}
ktor-server-core                     = { module = "io.ktor:ktor-server-core"                                        , version.ref = "ktor"}
ktor-server-content-negotiation      = { module = "io.ktor:ktor-server-content-negotiation"                         , version.ref = "ktor"}
ktor-server-metrics-micrometer       = { module = "io.ktor:ktor-server-metrics-micrometer"                          , version.ref = "ktor"}
ktor-server-call-logging             = { module = "io.ktor:ktor-server-call-logging"                                , version.ref = "ktor"}
ktor-server-cors                     = { module = "io.ktor:ktor-server-cors"                                        , version.ref = "ktor"}
ktor-server-swagger                  = { module = "io.ktor:ktor-server-swagger"                                     , version.ref = "ktor"}
ktor-server-openapi                  = { module = "io.ktor:ktor-server-openapi"                                     , version.ref = "ktor"}
ktor-server-http-redirect            = { module = "io.ktor:ktor-server-http-redirect"                               , version.ref = "ktor"}
ktor-server-compression              = { module = "io.ktor:ktor-server-compression"                                 , version.ref = "ktor"}
ktor-server-host-common              = { module = "io.ktor:ktor-server-host-common"                                 , version.ref = "ktor"}
ktor-server-resources                = { module = "io.ktor:ktor-server-resources"                                   , version.ref = "ktor"}
ktor-server-auth                     = { module = "io.ktor:ktor-server-auth"                                        , version.ref = "ktor"}
ktor-server-auth-jwt                 = { module = "io.ktor:ktor-server-auth-jwt"                                    , version.ref = "ktor"}
ktor-server-jetty                    = { module = "io.ktor:ktor-server-jetty"                                       , version.ref = "ktor"}
ktor-server-netty                    = { module = "io.ktor:ktor-server-netty"                                       , version.ref = "ktor"}
ktor-server-tests                    = { module = "io.ktor:ktor-server-tests"                                       , version.ref = "ktor"}
ktor-server-default-headers          = { module = "io.ktor:ktor-server-default-headers"                             , version.ref = "ktor"}
ktor-server-status-pages             = { module = "io.ktor:ktor-server-status-pages"                                , version.ref = "ktor"}
ktor-server-auto-head                = { module = "io.ktor:ktor-server-auto-head-response"                          , version.ref = "ktor"}
ktor-server-forwarded-header         = { module = "io.ktor:ktor-server-forwarded-header"                            , version.ref = "ktor"}
ktor-serialization-json              = { module = "io.ktor:ktor-serialization-kotlinx-json"                         , version.ref = "ktor"}

ktor-client-core                     = { module = "io.ktor:ktor-client-core"                                   , version.ref = "ktor"}
ktor-client-cio                      = { module = "io.ktor:ktor-client-cio"                                    , version.ref = "ktor"}
ktor-client-java                     = { module = "io.ktor:ktor-client-java"                                   , version.ref = "ktor"}
ktor-client-js                       = { module = "io.ktor:ktor-client-js"                                     , version.ref = "ktor"}
ktor-client-okhttp                   = { module = "io.ktor:ktor-client-okhttp"                                 , version.ref = "ktor"}
ktor-client-jetty                    = { module = "io.ktor:ktor-client-jetty"                                  , version.ref = "ktor"}
ktor-client-serialization            = { module = "io.ktor:ktor-client-serialization"                          , version.ref = "ktor"}
ktor-client-websockets               = { module = "io.ktor:ktor-client-websockets"                             , version.ref = "ktor"}
ktor-client-content-negotiation      = { module = "io.ktor:ktor-client-content-negotiation"                    , version.ref = "ktor"}
ktor-client-auth                     = { module = "io.ktor:ktor-client-auth"                                   , version.ref = "ktor"}
ktor-client-logging                  = { module = "io.ktor:ktor-client-logging"                                , version.ref = "ktor"}
ktor-client-resources                = { module = "io.ktor:ktor-client-resources"                              , version.ref = "ktor"}
ktor-client-encoding                 = { module = "io.ktor:ktor-client-encoding"                               , version.ref = "ktor"}
ktor-client-mock                     = { module = "io.ktor:ktor-client-mock"                                   , version.ref = "ktor"}

arrow-suspendapp                     = { module = "io.arrow-kt:suspendapp"                                     , version.ref = "arrow-suspendapp" }
arrow-suspendapp-ktor                = { module = "io.arrow-kt:suspendapp-ktor"                                , version.ref = "arrow-suspendapp" }
ktor-cohort-core                     = { module = "com.sksamuel.cohort:cohort-core"                            , version.ref = "ktor-cohort"}
ktor-cohort-hikari                   = { module = "com.sksamuel.cohort:cohort-hikari"                          , version.ref = "ktor-cohort"}
rsocket-ktor-client                  = { module = "io.rsocket.kotlin:rsocket-ktor-client"                      , version.ref = "rsocket"}
rsocket-ktor-server                  = { module = "io.rsocket.kotlin:rsocket-ktor-server"                      , version.ref = "rsocket"}
uri-kmp                              = { module = "com.eygraber:uri-kmp"                                       , version.ref = "uri-kmp"}

logback-classic                      = { module = "ch.qos.logback:logback-classic"                             , version.ref = "logback"}
exposeb-bom                          = { module = "org.jetbrains.exposed:exposed-bom"                          , version.ref = "exposed"}
exposed-core                         = { module = "org.jetbrains.exposed:exposed-core"                         , version.ref = "exposed"}
exposed-dao                          = { module = "org.jetbrains.exposed:exposed-dao"                          , version.ref = "exposed"}
exposed-jdbc                         = { module = "org.jetbrains.exposed:exposed-jdbc"                         , version.ref = "exposed"}
exposed-java-time                    = { module = "org.jetbrains.exposed:exposed-java-time"                    , version.ref = "exposed"}
exposed-kotlin-datetime              = { module = "org.jetbrains.exposed:exposed-kotlin-datetime"              , version.ref = "exposed"}
postgresql                           = { module = "org.postgresql:postgresql"                                  , version.ref = "postgresql"}
hikariCP                             = { module = "com.zaxxer:HikariCP"                                        , version.ref = "hikariCP"}
micrometer-prometheus                = { module = "io.micrometer:micrometer-registry-prometheus"               , version.ref = "micrometer"}
h2                                   = { module = "com.h2database:h2"                                          , version.ref = "h2"}
config4k                             = { module = "io.github.config4k:config4k"                                , version.ref = "config4k"}
hoplite-hocon                        = { module = "com.sksamuel.hoplite:hoplite-hocon"                         , version.ref = "hoplite"}
expiringmap                          = { module = "net.jodah:expiringmap"                                      , version.ref = "expiringmap"}
shedlock-jdbc                        = { module = "net.javacrumbs.shedlock:shedlock-provider-jdbc"             , version.ref = "shedlock"}
sherlock-sql                         = { module = "com.coditory.sherlock:sherlock-sql"                         , version.ref = "sherlock"}

kotlin-retry                         = { module = "com.michael-bull.kotlin-retry:kotlin-retry"                 , version.ref = "kotlin-retry" }
kotest-core                          = { module = "io.kotest:kotest-assertions-core"                           , version.ref = "kotest"}
kotest-junit5                        = { module = "io.kotest:kotest-runner-junit5"                             , version.ref = "kotest"}
intellij-markdown                    = { module = "org.jetbrains:markdown"                                     , version.ref = "intellij-markdown"}
kotlin-logging                       = { module = "io.github.oshai:kotlin-logging"                             , version.ref = "kotlin-logging"}
kotlin-bignum                        = { module = "com.ionspin.kotlin:bignum"                                  , version.ref = "kotlin-bignum"}
kotlin-codepoints                    = { module = "de.cketti.unicode:kotlin-codepoints"                        , version.ref = "kotlin-codepoints"}
kotlin-codepoints-deluxe             = { module = "de.cketti.unicode:kotlin-codepoints-deluxe"                 , version.ref = "kotlin-codepoints"}
kotlin-diff                          = { module = "io.github.petertrr:kotlin-multiplatform-diff"               , version.ref = "kotlin-diff"}
kotlinx-uuid                         = { module = "app.softwork:kotlinx-uuid-core"                             , version.ref = "kotlinx-uuid" }
benasher44-uuid                      = { module = "com.benasher44:uuid"                                        , version.ref = "benasher44-uuid" }
cash-turbine                         = { module = "app.cash.turbine:turbine"                                   , version.ref = "cash-turbine" }
store5                               = { module = "org.mobilenativefoundation.store:store5"                    , version.ref = "kmp-store5" }
parsus                               = { module = "me.alllex.parsus:parsus"                                    , version.ref = "parsus" }
cache4k                              = { module = "io.github.reactivecircus.cache4k:cache4k"                   , version.ref = "cache4k" }

akkurate-core                        = { module = "dev.nesk.akkurate:akkurate-core"                              , version.ref = "akkurate"}
akkurate-ksp-plugin                  = { module = "dev.nesk.akkurate:akkurate-ksp-plugin"                        , version.ref = "akkurate"}

ajalt-mordant                        = { module = "com.github.ajalt.mordant:mordant"                           , version.ref = "ajalt-mordant"}
ajalt-colormath                      = { module = "com.github.ajalt.colormath:colormath"                       , version.ref = "ajalt-colormath"}
jgit                                 = { module = "org.eclipse.jgit:org.eclipse.jgit"                          , version.ref = "jgit" }
jte                                  = { module = "gg.jte:jte"                                                 , version.ref = "jte" }
jte-runtime                          = { module = "gg.jte:jte-runtime"                                         , version.ref = "jte" }
jte-models                           = { module = "gg.jte:jte-models"                                          , version.ref = "jte" }
jte-native                           = { module = "gg.jte:native-resources"                                    , version.ref = "jte" }
jte-kotlin                           = { module = "gg.jte:jte-kotlin"                                          , version.ref = "jte" }
junit-bom                            = { module = "org.junit:junit-bom"                                        , version.ref = "junit"}
junit-jupiter                        = { module = "org.junit.jupiter:junit-jupiter"                            , version.ref = "junit"}
junit-jupiter-api                    = { module = "org.junit.jupiter:junit-jupiter-api"                        , version.ref = "junit"}
junit-jupiter-engine                 = { module = "org.junit.jupiter:junit-jupiter-engine"                     , version.ref = "junit"}
junit-jupiter-params                 = { module = "org.junit.jupiter:junit-jupiter-params"                     , version.ref = "junit"}

kobweb-api                           = { module = "com.varabyte.kobweb:kobweb-api"                             , version.ref = "kobweb" }
kobweb-core                          = { module = "com.varabyte.kobweb:kobweb-core"                            , version.ref = "kobweb" }
kobweb-silk-core                     = { module = "com.varabyte.kobweb:kobweb-silk"                            , version.ref = "kobweb" }
kobweb-silk-icons-fa                 = { module = "com.varabyte.kobweb:kobweb-silk-icons-fa"                   , version.ref = "kobweb" }
kobweb-streams                       = { module = "com.varabyte.kobweb:kobweb-streams"                         , version.ref = "kobweb" }

graalvm-sdk                          = { module = "org.graalvm.sdk:graal-sdk"                                  , version.ref = "graalvm"}
google-auto-annotations              = { module = "com.google.auto.service:auto-service-annotations"           , version.ref = "google-auto-service"}
google-tink                          = { module = "com.google.crypto.tink:tink"                                , version.ref = "google-tink"}
ksp-auto-service                     = { module = "dev.zacsweers.autoservice:auto-service-ksp"                 , version.ref = "ksp-auto-service"}
koin-core                            = { module = "io.insert-koin:koin-core"                                   , version.ref = "koin"}
koin-ktor                            = { module = "io.insert-koin:koin-ktor"                                   , version.ref = "koin"}
koin-slf4j                           = { module = "io.insert-koin:koin-logger-slf4j"                           , version.ref = "koin"}
koin-test                            = { module = "io.insert-koin:koin-test"                                   , version.ref = "koin"}
koin-test-junit5                     = { module = "io.insert-koin:koin-test-junit5"                            , version.ref = "koin"}
mockk                                = { module = "io.mockk:mockk"                                             , version.ref = "mockk"}
classgraph                           = { module = "io.github.classgraph:classgraph"                            , version.ref = "classgraph"}
jctools-core                         = { module = "org.jctools:jctools-core"                                   , version.ref = "jctools"}
slf4j-api                            = { module = "org.slf4j:slf4j-api"                                        , version.ref = "slf4j"}
slf4j-simple                         = { module = "org.slf4j:slf4j-simple"                                     , version.ref = "slf4j"}
slf4j-nop                            = { module = "org.slf4j:slf4j-nop"                                        , version.ref = "slf4j"}
logback-core                         = { module = "ch.qos.logback:logback-core"                                , version.ref = "logback"}
slf4j-jpl                            = { module = "org.slf4j:slf4j-jdk-platform-logging"                       , version.ref = "slf4j"}
log4j-bom                            = { module = "org.apache.logging.log4j:log4j-bom"                         , version.ref = "log4j"}
log4j-core                           = { module = "org.apache.logging.log4j:log4j-core"                        , version.ref = "log4j"}
log4j-jpl                            = { module = "org.apache.logging.log4j:log4j-jpl"                         , version.ref = "log4j"}

java-keyring                         = { module = "com.github.javakeyring:java-keyring"                        , version.ref = "java-keyring"}
java-keychain                        = { module = "pt.davidafsilva.apple:jkeychain"                            , version.ref = "java-keychain"}
webjars-xterm                        = { module = "org.webjars.npm:xterm"                                      , version.ref = "webjars-xterm" }

compose-routing                      = { module = "app.softwork:routing-compose"                               , version.ref = "compose-routing" }
compose-icons-cssgg                  = { module = "br.com.devsrsouza.compose.icons:css-gg"                     , version.ref = "compose-icons" }
compose-icons-weatherIcons           = { module = "br.com.devsrsouza.compose.icons:erikflowers-weather-icons"  , version.ref = "compose-icons" }
compose-icons-evaIcons               = { module = "br.com.devsrsouza.compose.icons:eva-icons"                  , version.ref = "compose-icons" }
compose-icons-feather                = { module = "br.com.devsrsouza.compose.icons:feather"                    , version.ref = "compose-icons" }
compose-icons-fontAwesome            = { module = "br.com.devsrsouza.compose.icons:font-awesome"               , version.ref = "compose-icons" }
compose-icons-lineAwesome            = { module = "br.com.devsrsouza.compose.icons:line-awesome"               , version.ref = "compose-icons" }
compose-icons-linea                  = { module = "br.com.devsrsouza.compose.icons:linea"                      , version.ref = "compose-icons" }
compose-icons-octicons               = { module = "br.com.devsrsouza.compose.icons:octicons"                   , version.ref = "compose-icons" }
compose-icons-simpleIcons            = { module = "br.com.devsrsouza.compose.icons:simple-icons"               , version.ref = "compose-icons" }
compose-icons-tablerIcons            = { module = "br.com.devsrsouza.compose.icons:tabler-icons"               , version.ref = "compose-icons" }
compose-html-lazy-layouts            = { module = "dev.opensavvy.compose.lazy:lazy-layouts"                    , version.ref = "compose-html-lazy-layouts" }

kotlin-wrappers-bom                  = { module = "org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom"          , version.ref = "kotlin-wrappers" }
multiplatform-settings-core          = { module = "com.russhwolf:multiplatform-settings"                       , version.ref = "kmp-settings" }
multiplatform-settings-coroutines    = { module = "com.russhwolf:multiplatform-settings-coroutines"            , version.ref = "kmp-settings" }
multiplatform-settings-no-arg        = { module = "com.russhwolf:multiplatform-settings-no-arg"                , version.ref = "kmp-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization"         , version.ref = "kmp-settings" }

apache-commons-imaging               = { module = "org.apache.commons:commons-imaging"                         , version.ref = "apache-commons-imaging" }
testcontainers-bom                   = { module = "org.testcontainers:testcontainers-bom"                      , version.ref = "testcontainers"}
testcontainers-core                  = { module = "org.testcontainers:testcontainers" }
testcontainers-postgresql            = { module = "org.testcontainers:postgresql" }
testcontainers-junit5                = { module = "org.testcontainers:junit-jupiter" }
kubernetes-client                    = { module = "io.kubernetes:client-java"                                  , version.ref = "kubernetes-client"}
reflect-typeparamresolver            = { module = "net.harawata.reflection:typeparameterresolver"              , version.ref = "reflect-typeparamresolver"}
reflect-typetools                    = { module = "net.jodah:typetools"                                        , version.ref = "reflect-typetools"}

[bundles]
ktor-server = [
    "ktor-bom",
    "ktor-server-core",
    "ktor-server-content-negotiation",
    "ktor-server-metrics-micrometer",
    "ktor-server-call-logging",
    "ktor-server-cors",
    "ktor-server-swagger",
    "ktor-server-openapi",
    "ktor-server-http-redirect",
    "ktor-server-compression",
    "ktor-server-host-common",
    "ktor-server-resources",
    "ktor-server-auth",
    "ktor-server-auth-jwt",
    "ktor-server-netty",
    "ktor-server-tests",
    "ktor-server-default-headers",
    "ktor-server-status-pages",
    "ktor-server-auto-head",
    "ktor-server-forwarded-header",
    "ktor-serialization-json",
    "ktor-cohort-core",
    "ktor-cohort-hikari"
]

ktor-client = [
    "ktor-bom",
    "ktor-client-core",
    "ktor-client-cio",
    "ktor-client-java",
    "ktor-client-okhttp",
    "ktor-client-jetty",
    "ktor-client-websockets",
    "ktor-client-content-negotiation",
    "ktor-client-encoding",
    "ktor-serialization-json",
    "ktor-client-resources",
    "ktor-client-auth",
    "ktor-client-logging",
    "ktor-client-mock"
]

[plugins]
kotlin-allopen                       = { id = "org.jetbrains.kotlin.plugin.allopen"                            , version.ref = "kotlin"}
kotlinx-benchmark                    = { id = "org.jetbrains.kotlinx.benchmark"                                , version.ref = "kotlinx-benchmark" }
ktor                                 = { id = "io.ktor.plugin"                                                 , version.ref = "ktor" }
exposed                              = { id = "com.jetbrains.exposed.gradle.plugin"                            , version.ref = "exposed-plugin" }
jte                                  = { id = "gg.jte.gradle"                                                  , version.ref = "jte" }
benmanes                             = { id = "com.github.ben-manes.versions"                                  , version.ref = "benmanes" }
bestpractices                        = { id = "com.autonomousapps.plugin-best-practices-plugin"                , version.ref = "best-practices-plugin" }
graalvm-nativeimage                  = { id = "org.graalvm.buildtools.native"                                  , version.ref = "graalvm-nativeimage"}
buildkonfig                          = { id = "com.codingfeline.buildkonfig"                                   , version.ref = "buildkonfig"}
jetbrains-compose-mpp                = { id = "org.jetbrains.compos"                                           , version.ref = "jetbrains-compose"}
kobweb-application                   = { id = "com.varabyte.kobweb.application"                                , version.ref = "kobweb" }
kobweb-library                       = { id = "com.varabyte.kobweb.library"                                    , version.ref = "kobweb" }
kobwebx-markdown                     = { id = "com.varabyte.kobwebx.markdown"                                  , version.ref = "kobweb" }