[versions]
java                           = "25"
kotlin                         = "2.1.20"
kotlin-ksp                     = "2.1.20-2.0.0"
kotlin-jvmtarget               = "21"
kotlin-dsl-jvmtarget           = "21"
kotlin-api-version             = "2.1"
kotlin-lang-version            = "2.1"
gradle                         = "8.14-rc-2"
java-vendor                    = "Oracle"
java-jvmArguments              = "--enable-preview"
java-addModules                = "jdk.incubator.vector"

# Project specifc config
group                          = "dev.suresh.kmp"
app-mainclass                  = "dev.suresh.AppKt"
dev-name                       = "sureshg"
dev-email                      = "email@suresh.dev"
org-name                       = "suresh.dev"
org-url                        = "https://suresh.dev"

# Dependency Versions
bc-plugins                     = "1.31.0"
kotlinx-kover                  = "0.9.1"
kotlinx-bcv                    = "0.17.0"
kotlin-dokka                   = "2.0.0"
kotlinx-io                     = "0.7.0"
kotlinx-atomicfu               = "0.27.0"
kotlinx-coroutines             = "1.10.2"
kotlinx-datetime               = "0.6.2"
kotlinx-datetime-zoneinfo      = "2025a-spi.0.6.2"
kotlinx-serialization          = "1.8.1"
kotlinx-rpc                    = "0.6.2"
kotlinx-collections-immutable  = "0.3.8"
kotlinx-lincheck               = "2.39"
kotlinx-html                   = "0.12.0"
kotlinx-browser                = "0.3"
kotlinx-benchmark              = "0.4.13"
kotlinx-fuzz                   = "0.2.2"
kotlinx-metadata               = "0.9.0"
kotlinx-reflect-lite           = "1.1.0"
kotlin-wrappers                = "2025.4.16"
kotlin-redacted                = "1.13.0"
kotlin-serviceloader           = "0.0.15"
kotlinx-multik                 = "0.2.3"
kotlinx-dataframe              = "1.0.0-dev-6656"
kotlinx-kandy                  = "0.8.0"
kotlin-statistics              = "0.4.0-RC1"
evas                           = "1.2.0"
kopy                           = "0.15.0+2.1.20"
poko                           = "0.18.6"
mappie                         = "2.1.20-1.2.3"
akkurate                       = "0.11.0"
kaml                           = "0.77.0"
snakeyaml-engine-kmp           = "3.1.1"
konsist                        = "0.17.3"
decoroutinator                 = "2.4.8"
spring-boot                    = "3.4.4"
spring-depmgmt                 = "1.1.7"
ktor                           = "3.1.2"
ktor-cohort                    = "2.6.2"
otel                           = "1.49.0"
otel-instr                     = "2.15.0"
otel-instr-alpha               = "2.15.0-alpha"
otel-semconv                   = "1.32.0"
otel-samplers                  = "1.46.0-alpha"
elastic-otel                   = "0.4.0"
okio                           = "3.11.0"
sslcontext-kickstart           = "9.1.0"
ksp-auto-service               = "1.2.0"
gradle-kotlin-dsl              = "6.0.0"
zip-prefixer                   = "0.3.1"
ajalt-mordant                  = "3.0.2"
ajalt-clikt                    = "5.0.3"
ajalt-colormath                = "3.6.1"
jline                          = "3.29.0"
classgraph                     = "4.8.179"
cache4k                        = "0.14.0"
intellij-coverage              = "1.0.766"
intellij-markdown              = "0.7.3"
jgit                           = "7.2.0.202503040940-r"
jte                            = "3.2.0"
jimfs                          = "1.3.0"
sshj                           = "0.39.0"
jsch                           = "0.2.25"
pty4j                          = "0.13.4"
oshi                           = "6.8.1"
junit                          = "5.13.0-M2"
koin                           = "4.1.0-Beta7"
koin-annotations               = "2.0.1-Beta1"
metro                          = "0.1.2"
kotest                         = "6.0.0.M3"
mockk                          = "1.14.0"
mokkery                        = "2.7.2"
wiremock                       = "3.12.1"
wiremock-kotlin                = "2.1.1"
okhttp                         = "5.0.0-alpha.14"
slf4j                          = "2.1.0-alpha1"
logback                        = "1.5.18"
logback-tyler                  = "1.0.2"
log4j                          = "3.0.0-beta2"
jmh                            = "1.37"
mrjar                          = "0.1.1"
ktfmt                          = "0.54"
google-javaformat              = "1.26.0"
palantir-javaformat            = "2.63.0"
google-auto-service            = "1.1.1"
google-tink                    = "1.17.0"
graalvm                        = "24.2.1"
jspecify                       = "1.0.0"
rsocket                        = "0.20.0"
jctools                        = "4.0.5"
caffeine-coroutines            = "2.0.1"
kotlin-codepoints              = "0.9.0"
kotlin-logging                 = "7.0.7"
kotlin-bignum                  = "0.3.10"
kotlin-diff                    = "1.0.0"
kotlin-retry                   = "2.0.1"
kotlinx-jsonpath               = "3.0.2"
kotlin-cryptography            = "0.4.0"
kotlin-json-schema             = "0.1.1"
json-sugar                     = "0.7.0"
json-schema-validator          = "0.5.1"
pwall-json-schema              = "0.56"
uri-kmp                        = "0.0.19"
urlencoder                     = "1.5.0"
bytesize                       = "2.0.0-beta04"
cash-turbine                   = "1.2.0"
cardiologist                   = "0.3.1"
kmp-store5                     = "5.1.0-alpha05"
kmp-settings                   = "1.3.0"
kmp-appdirs                    = "1.2.0"
parsus                         = "0.6.1"
ksoup                          = "0.2.2"
java-keyring                   = "1.0.4"
java-keychain                  = "1.1.0"
webjars-xterm                  = "5.1.0"
arrow-suspendapp               = "0.5.0"
exposed                        = "0.61.0"
postgresql                     = "42.7.5"
hikariCP                       = "6.3.0"
h2                             = "2.3.232"
micrometer                     = "1.14.6"
swagger-ui                     = "5.17.14"
hoplite                        = "2.9.0"
config4k                       = "0.7.0"
shedlock                       = "6.4.0"
sherlock                       = "1.0.3"
sqids                          = "0.1.0"
tsid                           = "2.1.4"
expiringmap                    = "0.5.10"
otp                            = "2.1.0"
password4j                     = "1.8.2"
apache-commons-imaging         = "1.0-alpha5"
testcontainers                 = "1.20.6"
sourceBuddy                    = "2.5.0"
tcp-javanioproxy               = "1.6"
kubernetes-client              = "23.0.0"
reflect-typeparamresolver      = "1.0.3"
reflect-typetools              = "0.6.3"
async-profiler                 = "3.0"
ap-loader-all                  = "3.0-9"
openjdk-jmc                    = "9.1.0"
airlift-aircompressor          = "2.0.2"
airlift-security               = "332"
directory-keystore             = "1.1.1"
maven-mima                     = "3.0.0-alpha-3"
maven-archeologist             = "0.0.10"
jfree-chart                    = "1.5.4"
jfree-svg                      = "5.0.6"
xchart                         = "3.8.8"
batik                          = "1.18"
twelvemonkeys                  = "3.12.0"
okapibarcode                   = "0.5.0"
chasm                          = "0.9.66"
cel                            = "0.9.1"
kfswatch                       = "1.3.0"
kmp-process                    = "0.2.0"
kmbed                          = "1.8.4"
langchain4j                    = "1.0.0-beta3"
jlama                          = "0.8.4"
mcp-kotlin                     = "0.4.0"
mcp4k                          = "0.4.0"
dflib                          = "2.0.0-M2"
ldaptive                       = "2.4.1"
chicory                        = "1.2.1"
weh-bindings                   = "0.5"
wasm2class                     = "0.3"
log4k                          = "0.40.0"
rwmutex                        = "1.0.0"
bluesky-ozone                  = "0.3.2"

# Compose
jetbrains-compose              = "1.8.0-beta02"
jetbrains-compose-viewmodel    = "2.9.0-alpha06"
jetbrains-compose-nav          = "2.9.0-alpha16"
jetbrains-compose-adaptive     = "1.1.0-beta02"
kobweb                         = "0.21.1"
detekt                         = "1.23.8"
detekt-compose-rules           = "0.4.22"
compose-hotreload              = "1.0.0-alpha05"
compose-icons                  = "1.1.1"
compose-routing                = "0.4.0"
kottie                         = "2.0.1"
mosaic                         = "0.17.0"
filekit-dialogs                = "0.10.0-beta02"

# NPM Dependencies
npm-highlightjs                = "11.11.0"
npm-kotlin-playground          = "1.30.0"
npm-xtermjs                    = "5.5.0"
npm-vega-lite                  = "5.19.0"
npm-jsjoda-tz                  = "2.21.1"
swagger-style                  = "https://unpkg.com/swagger-ui-themes@3.0.1/themes/3.x/theme-flattop.css"

# Plugin versions
benmanes                       = "0.52.0"
foojay-resolver                = "0.10.0"
gradle-develocity              = "4.0"
nmcp                           = "0.0.9"
nexus-publish                  = "2.0.0"
vanniktech-publish             = "0.31.0"
gradle-publish                 = "1.3.1"
shadow                         = "9.0.0-beta12"
spotless                       = "7.0.3"
semver-plugin                  = "0.8.0"
gratatouille                   = "0.0.5"
vercraft                       = "0.5.0"
kmpmt                          = "0.1.1"
tasktree                       = "4.0.1"
sigstore                       = "1.3.0"
reproducible-builds            = "1.0"
autonomousapps-depanalysis     = "2.16.0"
autonomousapps-bestpractices   = "0.10"
graalvm-nativeimage            = "0.10.6"
github-depgraph                = "0.1.0"
github-changelog               = "2.2.0"
wire-plugin                    = "5.3.1"
buildkonfig                    = "0.17.1"
gmazzo-buildconfig             = "5.6.2"
cyclonedx-plugin               = "1.10.0"
modulegraph                    = "0.12.0"
npm-publish-plugin             = "3.5.3"
exposed-plugin                 = "0.2.1"
jib-plugin                     = "3.4.5"
jib-nativeimage-extn           = "0.1.0"
includegit-plugin              = "0.1.6"
tomlj                          = "1.1.1"
animalsniffer                  = "2.0.0"
badass-runtime                 = "1.13.1-patch-1"
badass-jlink                   = "3.1.0"
jlink-jib                      = "0.4.1"
maven-plugin-api               = "3.9.9"
maven-plugin-annotations       = "3.15.1"
gradlex-maven-plugin           = "1.0.3"
typesafe-conventions           = "0.6.0"

# Repositories
repo-mvn-central               = "https://repo.maven.apache.org/maven2/"
repo-mvn-snapshot              = "https://central.sonatype.com/repository/maven-snapshots/"
repo-nodejs                    = "https://nodejs.org/dist/"

[libraries]
kotlin-bom                           = { module = "org.jetbrains.kotlin:kotlin-bom"                                 , version.ref = "kotlin"}
kotlin-stdlib                        = { module = "org.jetbrains.kotlin:kotlin-stdlib"                              , version.ref = "kotlin"}
kotlin-reflect                       = { module = "org.jetbrains.kotlin:kotlin-reflect"                             , version.ref = "kotlin"}
kotlin-test                          = { module = "org.jetbrains.kotlin:kotlin-test"                                , version.ref = "kotlin"}
kotlin-test-junit                    = { module = "org.jetbrains.kotlin:kotlin-test-junit"                          , version.ref = "kotlin"}
kotlin-test-junit5                   = { module = "org.jetbrains.kotlin:kotlin-test-junit5"                         , version.ref = "kotlin"}
kotlin-metadata-jvm                  = { module = "org.jetbrains.kotlin:kotlin-metadata-jvm"                        , version.ref = "kotlin"}
kotlinx-coroutines-bom               = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom"                    , version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core              = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core"                   , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-test              = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test"                   , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-slf4j             = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j"                  , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-swing             = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing"                  , version.ref = "kotlinx-coroutines"}
kotlinx-coroutines-debug             = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug"                  , version.ref = "kotlinx-coroutines"}
kotlinx-serialization-bom            = { module = "org.jetbrains.kotlinx:kotlinx-serialization-bom"                 , version.ref = "kotlinx-serialization" }
kotlinx-serialization-core           = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core"                , version.ref = "kotlinx-serialization"}
kotlinx-serialization-json           = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json"                , version.ref = "kotlinx-serialization"}
kotlinx-serialization-json-io        = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json-io"             , version.ref = "kotlinx-serialization"}
kotlinx-serialization-hocon          = { module = "org.jetbrains.kotlinx:kotlinx-serialization-hocon"               , version.ref = "kotlinx-serialization"}
kotlinx-datetime                     = { module = "org.jetbrains.kotlinx:kotlinx-datetime"                          , version.ref = "kotlinx-datetime"}
kotlinx-datetime-zoneinfo            = { module = "org.jetbrains.kotlinx:kotlinx-datetime-zoneinfo"                 , version.ref = "kotlinx-datetime-zoneinfo"}
kotlinx-io-bytestring                = { module = "org.jetbrains.kotlinx:kotlinx-io-bytestring"                     , version.ref = "kotlinx-io"}
kotlinx-io-core                      = { module = "org.jetbrains.kotlinx:kotlinx-io-core"                           , version.ref = "kotlinx-io"}
kotlinx-io-filesystem                = { module = "org.jetbrains.kotlinx:kotlinx-io-filesystem"                     , version.ref = "kotlinx-io"}
kotlinx-io-okio                      = { module = "org.jetbrains.kotlinx:kotlinx-io-okio"                           , version.ref = "kotlinx-io"}
kotlinx-lincheck                     = { module = "org.jetbrains.kotlinx:lincheck"                                  , version.ref = "kotlinx-lincheck"}
kotlinx-fuzz-jazzer                  = { module = "org.jetbrains:kotlinx.fuzz.jazzer"                               , version.ref = "kotlinx-fuzz"}
kotlinx-reflect-lite                 = { module = "org.jetbrains.kotlinx:kotlinx.reflect.lite"                      , version.ref = "kotlinx-reflect-lite"}
kotlinx-collections-immutable        = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable"             , version.ref = "kotlinx-collections-immutable"}
kotlinx-html                         = { module = "org.jetbrains.kotlinx:kotlinx-html"                              , version.ref = "kotlinx-html"}
kotlinx-browser                      = { module = "org.jetbrains.kotlinx:kotlinx-browser"                           , version.ref = "kotlinx-browser"}
kotlinx-bench-runtime                = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-runtime"                 , version.ref = "kotlinx-benchmark"}
kotlinx-multik-default               = { module = "org.jetbrains.kotlinx:multik-default"                            , version.ref = "kotlinx-multik"}
kotlinx-dataframe-core               = { module = "org.jetbrains.kotlinx:dataframe-core"                            , version.ref = "kotlinx-dataframe"}
kotlinx-dataframe-csv                = { module = "org.jetbrains.kotlinx:dataframe-csv"                             , version.ref = "kotlinx-dataframe"}
kotlinx-dataframe-geo                = { module = "org.jetbrains.kotlinx:dataframe-geo"                             , version.ref = "kotlinx-dataframe"}
kotlinx-dataframe-jdbc               = { module = "org.jetbrains.kotlinx:dataframe-jdbc"                            , version.ref = "kotlinx-dataframe"}
kotlinx-kandy                        = { module = "org.jetbrains.kotlinx:kandy-lets-plot"                           , version.ref = "kotlinx-kandy"}
kotlinx-kandy-geo                    = { module = "org.jetbrains.kotlinx:kandy-geo"                                 , version.ref = "kotlinx-kandy"}
kotlinx-kandy-echarts                = { module = "org.jetbrains.kotlinx:kandy-echarts"                             , version.ref = "kotlinx-kandy"}
kotlin-statistics                    = { module = "org.jetbrains.kotlinx:kotlin-statistics"                         , version.ref = "kotlin-statistics"}
kotlin-ksp-api                       = { module = "com.google.devtools.ksp:symbol-processing-api"                   , version.ref = "kotlin-ksp"}
kotlin-redacted-annotations          = { module = "dev.zacsweers.redacted:redacted-compiler-plugin-annotations"     , version.ref = "kotlin-redacted"}
kotlin-cryptography-core             = { module = "dev.whyoleg.cryptography:cryptography-core"                      , version.ref = "kotlin-cryptography"}
kotlin-cryptography-random           = { module = "dev.whyoleg.cryptography:cryptography-random"                    , version.ref = "kotlin-cryptography"}
kotlin-cryptography-webcrypto        = { module = "dev.whyoleg.cryptography:cryptography-provider-webcrypto"        , version.ref = "kotlin-cryptography"}
jspecify                             = { module = "org.jspecify:jspecify"                                           , version.ref = "jspecify"}
kmpmt                                = { module = "com.jakewharton.kmpmt:kmpmt-gradle-plugin"                       , version.ref = "kmpmt" }

ktor-bom                             = { module = "io.ktor:ktor-bom"                                                , version.ref = "ktor"}
ktor-serialization                   = { module = "io.ktor:ktor-serialization"                                      , version.ref = "ktor"}
ktor-server-core                     = { module = "io.ktor:ktor-server-core"                                        , version.ref = "ktor"}
ktor-server-cio                      = { module = "io.ktor:ktor-server-cio"                                         , version.ref = "ktor"}
ktor-server-jetty-jakarta            = { module = "io.ktor:ktor-server-jetty-jakarta"                               , version.ref = "ktor"}
ktor-server-netty                    = { module = "io.ktor:ktor-server-netty"                                       , version.ref = "ktor"}
ktor-server-content-negotiation      = { module = "io.ktor:ktor-server-content-negotiation"                         , version.ref = "ktor"}
ktor-server-metrics-micrometer       = { module = "io.ktor:ktor-server-metrics-micrometer"                          , version.ref = "ktor"}
ktor-server-call-logging             = { module = "io.ktor:ktor-server-call-logging"                                , version.ref = "ktor"}
ktor-server-call-id                  = { module = "io.ktor:ktor-server-call-id"                                     , version.ref = "ktor"}
ktor-server-cors                     = { module = "io.ktor:ktor-server-cors"                                        , version.ref = "ktor"}
ktor-server-hsts                     = { module = "io.ktor:ktor-server-hsts"                                        , version.ref = "ktor"}
ktor-server-csrf                     = { module = "io.ktor:ktor-server-csrf"                                        , version.ref = "ktor"}
ktor-server-swagger                  = { module = "io.ktor:ktor-server-swagger"                                     , version.ref = "ktor"}
ktor-server-openapi                  = { module = "io.ktor:ktor-server-openapi"                                     , version.ref = "ktor"}
ktor-server-http-redirect            = { module = "io.ktor:ktor-server-http-redirect"                               , version.ref = "ktor"}
ktor-server-compression              = { module = "io.ktor:ktor-server-compression"                                 , version.ref = "ktor"}
ktor-server-rate-limit               = { module = "io.ktor:ktor-server-rate-limit"                                  , version.ref = "ktor"}
ktor-server-double-receive           = { module = "io.ktor:ktor-server-double-receive"                              , version.ref = "ktor"}
ktor-server-host-common              = { module = "io.ktor:ktor-server-host-common"                                 , version.ref = "ktor"}
ktor-server-resources                = { module = "io.ktor:ktor-server-resources"                                   , version.ref = "ktor"}
ktor-server-auth                     = { module = "io.ktor:ktor-server-auth"                                        , version.ref = "ktor"}
ktor-server-auth-jwt                 = { module = "io.ktor:ktor-server-auth-jwt"                                    , version.ref = "ktor"}
ktor-server-default-headers          = { module = "io.ktor:ktor-server-default-headers"                             , version.ref = "ktor"}
ktor-server-status-pages             = { module = "io.ktor:ktor-server-status-pages"                                , version.ref = "ktor"}
ktor-server-partial-content          = { module = "io.ktor:ktor-server-partial-content"                             , version.ref = "ktor"}
ktor-server-auto-head                = { module = "io.ktor:ktor-server-auto-head-response"                          , version.ref = "ktor"}
ktor-server-forwarded-header         = { module = "io.ktor:ktor-server-forwarded-header"                            , version.ref = "ktor"}
ktor-server-html                     = { module = "io.ktor:ktor-server-html-builder"                                , version.ref = "ktor"}
ktor-server-websockets               = { module = "io.ktor:ktor-server-websockets"                                  , version.ref = "ktor"}
ktor-server-sse                      = { module = "io.ktor:ktor-server-sse"                                         , version.ref = "ktor"}
ktor-server-test-host                = { module = "io.ktor:ktor-server-test-host"                                   , version.ref = "ktor"}
ktor-serialization-json              = { module = "io.ktor:ktor-serialization-kotlinx-json"                         , version.ref = "ktor"}
ktor-serialization-xml               = { module = "io.ktor:ktor-serialization-kotlinx-xml"                          , version.ref = "ktor"}

ktor-client-core                     = { module = "io.ktor:ktor-client-core"                                        , version.ref = "ktor"}
ktor-client-cio                      = { module = "io.ktor:ktor-client-cio"                                         , version.ref = "ktor"}
ktor-client-java                     = { module = "io.ktor:ktor-client-java"                                        , version.ref = "ktor"}
ktor-client-curl                     = { module = "io.ktor:ktor-client-curl"                                        , version.ref = "ktor"}
ktor-client-js                       = { module = "io.ktor:ktor-client-js"                                          , version.ref = "ktor"}
ktor-client-okhttp                   = { module = "io.ktor:ktor-client-okhttp"                                      , version.ref = "ktor"}
ktor-client-jetty                    = { module = "io.ktor:ktor-client-jetty"                                       , version.ref = "ktor"}
ktor-client-serialization            = { module = "io.ktor:ktor-client-serialization"                               , version.ref = "ktor"}
ktor-client-websockets               = { module = "io.ktor:ktor-client-websockets"                                  , version.ref = "ktor"}
ktor-client-content-negotiation      = { module = "io.ktor:ktor-client-content-negotiation"                         , version.ref = "ktor"}
ktor-client-auth                     = { module = "io.ktor:ktor-client-auth"                                        , version.ref = "ktor"}
ktor-client-logging                  = { module = "io.ktor:ktor-client-logging"                                     , version.ref = "ktor"}
ktor-client-resources                = { module = "io.ktor:ktor-client-resources"                                   , version.ref = "ktor"}
ktor-client-encoding                 = { module = "io.ktor:ktor-client-encoding"                                    , version.ref = "ktor"}
ktor-client-mock                     = { module = "io.ktor:ktor-client-mock"                                        , version.ref = "ktor"}

# krpc
kotlinx-rpc-bom                         = { module = "org.jetbrains.kotlinx:kotlinx-rpc-bom"                        , version.ref = "kotlinx-rpc"}
kotlinx-rpc-krpc-server                 = { module = "org.jetbrains.kotlinx:kotlinx-rpc-krpc-server"                , version.ref = "kotlinx-rpc"}
kotlinx-rpc-krpc-client                 = { module = "org.jetbrains.kotlinx:kotlinx-rpc-krpc-client"                , version.ref = "kotlinx-rpc"}

kotlinx-rpc-runtime                     = { module = "org.jetbrains.kotlinx:kotlinx-rpc-runtime"                    , version.ref = "kotlinx-rpc"}
kotlinx-rpc-runtime-client              = { module = "org.jetbrains.kotlinx:kotlinx-rpc-runtime-client"             , version.ref = "kotlinx-rpc"}
kotlinx-rpc-runtime-server              = { module = "org.jetbrains.kotlinx:kotlinx-rpc-runtime-server"             , version.ref = "kotlinx-rpc"}
kotlinx-rpc-transport-ktor-client       = { module = "org.jetbrains.kotlinx:kotlinx-rpc-transport-ktor-client"      , version.ref = "kotlinx-rpc"}
kotlinx-rpc-transport-ktor-server       = { module = "org.jetbrains.kotlinx:kotlinx-rpc-transport-ktor-server"      , version.ref = "kotlinx-rpc"}
kotlinx-rpc-runtime-serialization-json  = { module = "org.jetbrains.kotlinx:kotlinx-rpc-runtime-serialization-json" , version.ref = "kotlinx-rpc"}

evas                                 = { module = "io.sellmair:evas"                                           , version.ref = "evas"}
konsist                              = { module = "com.lemonappdev:konsist"                                    , version.ref = "konsist" }
akkurate-core                        = { module = "dev.nesk.akkurate:akkurate-core"                            , version.ref = "akkurate"}
akkurate-ksp-plugin                  = { module = "dev.nesk.akkurate:akkurate-ksp-plugin"                      , version.ref = "akkurate"}

okio-bom                             = { module = "com.squareup.okio:okio-bom"                                 , version.ref = "okio"}
okio                                 = { module = "com.squareup.okio:okio"                                     , version.ref = "okio"}
okio-fakefilesystem                  = { module = "com.squareup.okio:okio-fakefilesystem"                       , version.ref = "okio"}
arrow-suspendapp                     = { module = "io.arrow-kt:suspendapp"                                     , version.ref = "arrow-suspendapp" }
arrow-suspendapp-ktor                = { module = "io.arrow-kt:suspendapp-ktor"                                , version.ref = "arrow-suspendapp" }
kmp-appdirs                          = { module = "ca.gosyer:kotlin-multiplatform-appdirs"                     , version.ref = "kmp-appdirs"}

airlift-aircompressor                = { module = "io.airlift:aircompressor"                                   , version.ref = "airlift-aircompressor"}
airlift-security                     = { module = "io.airlift:security"                                        , version.ref = "airlift-security"}
airlift-security-jwks                = { module = "io.airlift:security-jwks"                                   , version.ref = "airlift-security"}
directory-keystore                   = { module = "com.github.marschall:directory-keystore"                    , version.ref = "directory-keystore"}
pty4j                                = { module = "org.jetbrains.pty4j:pty4j"                                  , version.ref = "pty4j"}
sshj                                 = { module = "com.hierynomus:sshj"                                        , version.ref = "sshj"}
jsch                                 = { module = "com.github.mwiede:jsch"                                     , version.ref = "jsch"}
sslcontext-kickstart                 = { module = "io.github.hakky54:sslcontext-kickstart"                     , version.ref = "sslcontext-kickstart"}
oshi-core                            = { module = "com.github.oshi:oshi-core-java11"                           , version.ref = "oshi"}

ktor-cohort-core                     = { module = "com.sksamuel.cohort:cohort-ktor"                            , version.ref = "ktor-cohort"}
ktor-cohort-hikari                   = { module = "com.sksamuel.cohort:cohort-hikari"                          , version.ref = "ktor-cohort"}
rsocket-ktor-client                  = { module = "io.rsocket.kotlin:ktor-client-rsocket"                      , version.ref = "rsocket"}
rsocket-ktor-server                  = { module = "io.rsocket.kotlin:ktor-server-rsocket"                      , version.ref = "rsocket"}
rsocket-ktor-tcp                     = { module = "io.rsocket.kotlin:rsocket-transport-ktor-tcp"               , version.ref = "rsocket"}
uri-kmp                              = { module = "com.eygraber:uri-kmp"                                       , version.ref = "uri-kmp"}
kotlinx-jsonpath                     = { module = "com.eygraber:jsonpathkt-kotlinx"                            , version.ref = "kotlinx-jsonpath"}
json-sugar                           = { module = "com.eygraber:json-sugar"                                    , version.ref = "json-sugar"}
json-schema-validator                = { module = "io.github.optimumcode:json-schema-validator"                , version.ref = "json-schema-validator"}
json-schema-gen                      = { module = "sh.ondr:kotlin-json-schema"                                 , version.ref = "kotlin-json-schema"}
pwall-json-schema                    = { module = "net.pwall.json:json-kotlin-schema"                          , version.ref = "pwall-json-schema"}
urlencoder                           = { module = "net.thauvin.erik.urlencoder:urlencoder-lib"                 , version.ref = "urlencoder"}

logback-classic                      = { module = "ch.qos.logback:logback-classic"                             , version.ref = "logback"}
exposeb-bom                          = { module = "org.jetbrains.exposed:exposed-bom"                          , version.ref = "exposed"}
exposed-core                         = { module = "org.jetbrains.exposed:exposed-core"                         , version.ref = "exposed"}
exposed-dao                          = { module = "org.jetbrains.exposed:exposed-dao"                          , version.ref = "exposed"}
exposed-jdbc                         = { module = "org.jetbrains.exposed:exposed-jdbc"                         , version.ref = "exposed"}
exposed-java-time                    = { module = "org.jetbrains.exposed:exposed-java-time"                    , version.ref = "exposed"}
exposed-kotlin-datetime              = { module = "org.jetbrains.exposed:exposed-kotlin-datetime"              , version.ref = "exposed"}
exposed-crypt                        = { module = "org.jetbrains.exposed:exposed-crypt"                        , version.ref = "exposed"}
exposed-json                         = { module = "org.jetbrains.exposed:exposed-json"                         , version.ref = "exposed"}
exposed-money                        = { module = "org.jetbrains.exposed:exposed-money"                        , version.ref = "exposed"}
exposed-migration                    = { module = "org.jetbrains.exposed:exposed-migration"                    , version.ref = "exposed"}
postgresql                           = { module = "org.postgresql:postgresql"                                  , version.ref = "postgresql"}
hikariCP                             = { module = "com.zaxxer:HikariCP"                                        , version.ref = "hikariCP"}
micrometer-prometheus                = { module = "io.micrometer:micrometer-registry-prometheus"               , version.ref = "micrometer"}
h2                                   = { module = "com.h2database:h2"                                          , version.ref = "h2"}
shedlock-jdbc                        = { module = "net.javacrumbs.shedlock:shedlock-provider-jdbc"             , version.ref = "shedlock"}
sherlock-sql                         = { module = "com.coditory.sherlock:sherlock-sql"                         , version.ref = "sherlock"}
config4k                             = { module = "io.github.config4k:config4k"                                , version.ref = "config4k"}
hoplite-hocon                        = { module = "com.sksamuel.hoplite:hoplite-hocon"                         , version.ref = "hoplite"}
expiringmap                          = { module = "net.jodah:expiringmap"                                      , version.ref = "expiringmap"}
password4j                           = { module = "com.password4j:password4j"                                  , version.ref = "password4j"}
otp-java                             = { module = "com.github.bastiaanjansen:otp-java"                         , version.ref = "otp"}
cel                                  = { module = "dev.cel:cel"                                                , version.ref = "cel"}
jimfs                                = { module = "com.google.jimfs:jimfs"                                     , version.ref = "jimfs" }
tomlj                                = { module = "org.tomlj:tomlj"                                            , version.ref = "tomlj" }
bytesize                             = { module = "me.saket.bytesize:bytesize"                                 , version.ref = "bytesize" }
zip-prefixer                         = { module = "net.e175.klaus:zip-prefixer"                                , version.ref = "zip-prefixer" }
jib-nativeimage-extn                 = { module = "com.google.cloud.tools:jib-native-image-extension-gradle"   , version.ref = "jib-nativeimage-extn" }

# Yaml
kaml                                 = { module = "com.charleskorn.kaml:kaml"                                  , version.ref = "kaml"}
snakeyaml-engine-kmp                 = { module = "it.krzeminski:snakeyaml-engine-kmp"                         , version.ref = "snakeyaml-engine-kmp"}

# Database IDs
sqids                                = { module = "org.sqids:sqids"                                            , version.ref = "sqids"}
tsid                                 = { module = "io.hypersistence:hypersistence-tsid"                        , version.ref = "tsid"}

kotlin-retry                         = { module = "com.michael-bull.kotlin-retry:kotlin-retry"                 , version.ref = "kotlin-retry" }
kotlin-retry-result                  = { module = "com.michael-bull.kotlin-retry:kotlin-retry-result"          , version.ref = "kotlin-retry" }
cardiologist                         = { module = "io.github.kevincianfarini.cardiologist:cardiologist"        , version.ref = "cardiologist" }
kotest-core                          = { module = "io.kotest:kotest-assertions-core"                           , version.ref = "kotest"}
kotest-junit5                        = { module = "io.kotest:kotest-runner-junit5"                             , version.ref = "kotest"}
intellij-markdown                    = { module = "org.jetbrains:markdown"                                     , version.ref = "intellij-markdown"}
kotlin-logging                       = { module = "io.github.oshai:kotlin-logging"                             , version.ref = "kotlin-logging"}
kotlin-bignum                        = { module = "com.ionspin.kotlin:bignum"                                  , version.ref = "kotlin-bignum"}
kotlin-bignum-serialization          = { module = "com.ionspin.kotlin:bignum-serialization-kotlinx"            , version.ref = "kotlin-bignum"}
kotlin-codepoints                    = { module = "de.cketti.unicode:kotlin-codepoints"                        , version.ref = "kotlin-codepoints"}
kotlin-codepoints-deluxe             = { module = "de.cketti.unicode:kotlin-codepoints-deluxe"                 , version.ref = "kotlin-codepoints"}
kotlin-diff                          = { module = "io.github.petertrr:kotlin-multiplatform-diff"               , version.ref = "kotlin-diff"}
cash-turbine                         = { module = "app.cash.turbine:turbine"                                   , version.ref = "cash-turbine" }
store5                               = { module = "org.mobilenativefoundation.store:store5"                    , version.ref = "kmp-store5" }
parsus                               = { module = "me.alllex.parsus:parsus"                                    , version.ref = "parsus" }
cache4k                              = { module = "io.github.reactivecircus.cache4k:cache4k"                   , version.ref = "cache4k" }
ksoup-kotlinx                        = { module = "com.fleeksoft.ksoup:ksoup-kotlinx"                          , version.ref = "ksoup" }

ajalt-mordant                        = { module = "com.github.ajalt.mordant:mordant"                           , version.ref = "ajalt-mordant"}
ajalt-mordant-coroutines             = { module = "com.github.ajalt.mordant:mordant-coroutines"                , version.ref = "ajalt-mordant"}
ajalt-mordant-markdown               = { module = "com.github.ajalt.mordant:mordant-markdown"                  , version.ref = "ajalt-mordant"}
ajalt-mordant-jvm-ffm                = { module = "com.github.ajalt.mordant:mordant-jvm-ffm"                   , version.ref = "ajalt-mordant"}
ajalt-colormath                      = { module = "com.github.ajalt.colormath:colormath"                       , version.ref = "ajalt-colormath"}
ajalt-clikt-core                     = { module = "com.github.ajalt.clikt:clikt-core"                          , version.ref = "ajalt-clikt"}
ajalt-clikt                          = { module = "com.github.ajalt.clikt:clikt"                               , version.ref = "ajalt-clikt"}
ajalt-clikt-markdown                 = { module = "com.github.ajalt.clikt:clikt-markdown"                      , version.ref = "ajalt-clikt"}
jline-terminal-ffm                   = { module = "org.jline:jline-terminal-ffm"                               , version.ref = "jline"}
mosaic-runtime                       = { module = "com.jakewharton.mosaic:mosaic-runtime"                      , version.ref = "mosaic"}
jgit                                 = { module = "org.eclipse.jgit:org.eclipse.jgit"                          , version.ref = "jgit" }
jte                                  = { module = "gg.jte:jte"                                                 , version.ref = "jte" }
jte-runtime                          = { module = "gg.jte:jte-runtime"                                         , version.ref = "jte" }
jte-models                           = { module = "gg.jte:jte-models"                                          , version.ref = "jte" }
jte-native                           = { module = "gg.jte:native-resources"                                    , version.ref = "jte" }
jte-kotlin                           = { module = "gg.jte:jte-kotlin"                                          , version.ref = "jte" }
junit-bom                            = { module = "org.junit:junit-bom"                                        , version.ref = "junit"}
junit-jupiter                        = { module = "org.junit.jupiter:junit-jupiter"                            , version.ref = "junit"}
junit-jupiter-api                    = { module = "org.junit.jupiter:junit-jupiter-api"                        , version.ref = "junit"}
junit-jupiter-engine                 = { module = "org.junit.jupiter:junit-jupiter-engine"                     , version.ref = "junit"}
junit-jupiter-params                 = { module = "org.junit.jupiter:junit-jupiter-params"                     , version.ref = "junit"}
wiremock                             = { module = "org.wiremock:wiremock"                                      , version.ref = "wiremock"}
wiremock-standalone                  = { module = "org.wiremock:wiremock-standalone"                           , version.ref = "wiremock"}
wiremock-kotlin                      = { module = "com.marcinziolo:kotlin-wiremock"                            , version.ref = "wiremock-kotlin"}
okhttp-mockwebserver                 = { module = "com.squareup.okhttp3:mockwebserver"                         , version.ref = "okhttp"}
okhttp-tls                           = { module = "com.squareup.okhttp3:okhttp-tls"                            , version.ref = "okhttp"}

graal-sdk                            = { module = "org.graalvm.sdk:graal-sdk"                                  , version.ref = "graalvm"}
graal-svm                            = { module = "org.graalvm.nativeimage:svm"                                , version.ref = "graalvm"}
graal-polyglot                       = { module = "org.graalvm.polyglot:polyglot"                              , version.ref = "graalvm"}
graal-wasm                           = { module = "org.graalvm.polyglot:wasm"                                  , version.ref = "graalvm"}
google-auto-service-apt              = { module = "com.google.auto.service:auto-service"                       , version.ref = "google-auto-service"}
google-auto-annotations              = { module = "com.google.auto.service:auto-service-annotations"           , version.ref = "google-auto-service"}
google-tink                          = { module = "com.google.crypto.tink:tink"                                , version.ref = "google-tink"}
ksp-auto-service                     = { module = "dev.zacsweers.autoservice:auto-service-ksp"                 , version.ref = "ksp-auto-service"}
koin-bom                             = { module = "io.insert-koin:koin-bom"                                    , version.ref = "koin"}
koin-core                            = { module = "io.insert-koin:koin-core"                                   , version.ref = "koin"}
koin-core-coroutines                 = { module = "io.insert-koin:koin-core-coroutines"                        , version.ref = "koin"}
koin-ktor                            = { module = "io.insert-koin:koin-ktor"                                   , version.ref = "koin"}
koin-slf4j                           = { module = "io.insert-koin:koin-logger-slf4j"                           , version.ref = "koin"}
koin-ksp-compiler                    = { module = "io.insert-koin:koin-ksp-compiler"                           , version.ref = "koin"}
koin-test                            = { module = "io.insert-koin:koin-test"                                   , version.ref = "koin"}
koin-test-junit5                     = { module = "io.insert-koin:koin-test-junit5"                            , version.ref = "koin"}
koin-annotations                     = { module = "io.insert-koin:koin-annotations"                            , version.ref = "koin-annotations"}
mockk                                = { module = "io.mockk:mockk"                                             , version.ref = "mockk"}
classgraph                           = { module = "io.github.classgraph:classgraph"                            , version.ref = "classgraph"}
jctools-core                         = { module = "org.jctools:jctools-core"                                   , version.ref = "jctools"}
slf4j-api                            = { module = "org.slf4j:slf4j-api"                                        , version.ref = "slf4j"}
slf4j-simple                         = { module = "org.slf4j:slf4j-simple"                                     , version.ref = "slf4j"}
slf4j-nop                            = { module = "org.slf4j:slf4j-nop"                                        , version.ref = "slf4j"}
slf4j-jul                            = { module = "org.slf4j:jul-to-slf4j"                                     , version.ref = "slf4j"}
logback-core                         = { module = "ch.qos.logback:logback-core"                                , version.ref = "logback"}
logback-tyler                        = { module = "ch.qos.logback.tyler:tyler-base"                            , version.ref = "logback-tyler"}
slf4j-jpl                            = { module = "org.slf4j:slf4j-jdk-platform-logging"                       , version.ref = "slf4j"}
log4j-bom                            = { module = "org.apache.logging.log4j:log4j-bom"                         , version.ref = "log4j"}
log4j-core                           = { module = "org.apache.logging.log4j:log4j-core"                        , version.ref = "log4j"}
log4j-jpl                            = { module = "org.apache.logging.log4j:log4j-jpl"                         , version.ref = "log4j"}
java-keyring                         = { module = "com.github.javakeyring:java-keyring"                        , version.ref = "java-keyring"}
java-keychain                        = { module = "pt.davidafsilva.apple:jkeychain"                            , version.ref = "java-keychain"}
webjars-xterm                        = { module = "org.webjars.npm:xterm"                                      , version.ref = "webjars-xterm" }
caffeine-coroutines                  = { module = "dev.hsbrysk:caffeine-coroutines"                            , version.ref = "caffeine-coroutines" }

kotlin-wrappers-bom                  = { module = "org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom"          , version.ref = "kotlin-wrappers" }
kotlin-wrappers-browser              = { module = "org.jetbrains.kotlin-wrappers:kotlin-browser"               , version.ref = "kotlin-wrappers" }
kotlin-wrappers-css                  = { module = "org.jetbrains.kotlin-wrappers:kotlin-css"                   , version.ref = "kotlin-wrappers" }
multiplatform-settings-core          = { module = "com.russhwolf:multiplatform-settings"                       , version.ref = "kmp-settings" }
multiplatform-settings-coroutines    = { module = "com.russhwolf:multiplatform-settings-coroutines"            , version.ref = "kmp-settings" }
multiplatform-settings-no-arg        = { module = "com.russhwolf:multiplatform-settings-no-arg"                , version.ref = "kmp-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization"         , version.ref = "kmp-settings" }

apache-commons-imaging               = { module = "org.apache.commons:commons-imaging"                         , version.ref = "apache-commons-imaging" }
testcontainers-bom                   = { module = "org.testcontainers:testcontainers-bom"                      , version.ref = "testcontainers"}
testcontainers-core                  = { module = "org.testcontainers:testcontainers" }
testcontainers-postgresql            = { module = "org.testcontainers:postgresql" }
testcontainers-cassandra             = { module = "org.testcontainers:cassandra" }
testcontainers-k3s                   = { module = "org.testcontainers:k3s" }
testcontainers-clickhouse            = { module = "org.testcontainers:clickhouse" }
testcontainers-junit5                = { module = "org.testcontainers:junit-jupiter" }
kubernetes-client                    = { module = "io.kubernetes:client-java"                                  , version.ref = "kubernetes-client"}

tcp-javanioproxy                     = { module = "com.github.terma:javaniotcpproxy"                           , version.ref = "tcp-javanioproxy"}
reflect-typeparamresolver            = { module = "net.harawata.reflection:typeparameterresolver"              , version.ref = "reflect-typeparamresolver"}
reflect-typetools                    = { module = "net.jodah:typetools"                                        , version.ref = "reflect-typetools"}
sourceBuddy                          = { module = "com.javax0.sourcebuddy:SourceBuddy"                         , version.ref = "sourceBuddy"}
maven-mima                           = { module = "eu.maveniverse.maven.mima:mima"                             , version.ref = "maven-mima"}
maven-archeologist                   = { module = "com.squareup.tools.build:maven-archeologist"                , version.ref = "maven-archeologist"}

ap-converter                         = { module = "tools.profiler:async-profiler-converter"                    , version.ref = "async-profiler" }
ap-loader-all                        = { module = "me.bechberger:ap-loader-all"                                , version.ref = "ap-loader-all"}
jmc-common                           = { module = "org.openjdk.jmc:common"                                     , version.ref = "openjdk-jmc"}
jmc-jfr                              = { module = "org.openjdk.jmc:flightrecorder"                             , version.ref = "openjdk-jmc"}
jmc-jfr-rules                        = { module = "org.openjdk.jmc:flightrecorder.rules"                       , version.ref = "openjdk-jmc"}
jmc-jfr-rulesjdk                     = { module = "org.openjdk.jmc:flightrecorder.rules.jdk"                   , version.ref = "openjdk-jmc"}

# Charts
xchart                               = { module = "org.knowm.xchart:xchart"                                    , version.ref = "xchart"}
jfree-chart                          = { module = "org.jfree:jfreechart"                                       , version.ref = "jfree-chart"}
jfree-svg                            = { module = "org.jfree:org.jfree.svg"                                    , version.ref = "jfree-svg"}
batiksvg-all                         = { module = "org.apache.xmlgraphics:batik-all"                           , version.ref = "batik"}
imageio-extns                        = { module = "com.twelvemonkeys.imageio:imageio"                          , version.ref = "twelvemonkeys"}

# Barcode/QrCode
okapibarcode                         = { module = "uk.org.okapibarcode:okapibarcode"                           , version.ref = "okapibarcode"}

# OpenTelemetry
otel-bom                             = { module = "io.opentelemetry:opentelemetry-bom"                                                      , version.ref = "otel"}
otel-api                             = { module = "io.opentelemetry:opentelemetry-api"                                                      , version.ref = "otel"}
otel-exporter-otlp                   = { module = "io.opentelemetry:opentelemetry-exporter-otlp"                                            , version.ref = "otel"}
otel-autoconfigure                   = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure"                              , version.ref = "otel"}
otel-semconv                         = { module = "io.opentelemetry.semconv:opentelemetry-semconv"                                          , version.ref = "otel-semconv"}
otel-samplers                        = { module = "io.opentelemetry.contrib:opentelemetry-samplers"                                         , version.ref = "otel-samplers"}

otel-instr-bom                       = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom"                      , version.ref = "otel-instr"}
otel-instr-javaagent                 = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent"                                      , version.ref = "otel-instr"}
otel-instr-annotations               = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations"              , version.ref = "otel-instr"}
otel-instr-api                       = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api"                      , version.ref = "otel-instr"}
otel-instr-extension-api             = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api"                        , version.ref = "otel-instr-alpha"}
otel-instr-ktor                      = { module = "io.opentelemetry.instrumentation:opentelemetry-ktor-3.0"                                 , version.ref = "otel-instr-alpha"}
otel-instr-logback-appender          = { module = "io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0"                     , version.ref = "otel-instr-alpha"}
otel-instr-logback-mdc               = { module = "io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0"                          , version.ref = "otel-instr-alpha"}

# Compose
compose-runtime                      = { module = "org.jetbrains.compose.runtime:runtime"                                   , version.ref = "jetbrains-compose" }
compose-html-core                    = { module = "org.jetbrains.compose.html:html-core"                                    , version.ref = "jetbrains-compose" }
compose-navigation                   = { module = "org.jetbrains.androidx.navigation:navigation-compose"                    , version.ref = "jetbrains-compose-nav" }
compose-lifecycle-viewmodel          = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose"            , version.ref = "jetbrains-compose-viewmodel" }
compose-material3-windowsize         = { module = "org.jetbrains.compose.material3:material3-window-size-class"             , version.ref = "jetbrains-compose" }
compose-material3-adaptive           = { module = "org.jetbrains.compose.material3.adaptive:adaptive"                       , version.ref = "jetbrains-compose-adaptive" }
compose-material3-adaptive-layout    = { module = "org.jetbrains.compose.material3.adaptive:adaptive-layout"                , version.ref = "jetbrains-compose-adaptive" }
compose-material3-adaptive-nav       = { module = "org.jetbrains.compose.material3.adaptive:adaptive-navigation"            , version.ref = "jetbrains-compose-adaptive" }
compose-routing                      = { module = "app.softwork:routing-compose"                                            , version.ref = "compose-routing" }
compose-icons-fontAwesome            = { module = "br.com.devsrsouza.compose.icons:font-awesome"                            , version.ref = "compose-icons" }
detekt-compose-rules                 = { module = "io.nlopez.compose.rules:detekt"                                          , version.ref = "detekt-compose-rules" }
compose-kottie                       = { module = "io.github.ismai117:kottie"                                               , version.ref = "kottie" }
evas-compose                         = { module = "io.sellmair:evas-compose"                                                , version.ref = "evas" }
filekit-dialogs-compose              = { module = "io.github.vinceglb:filekit-dialogs-compose"                              , version.ref = "filekit-dialogs" }

kobweb-api                           = { module = "com.varabyte.kobweb:kobweb-api"                                          , version.ref = "kobweb" }
kobweb-core                          = { module = "com.varabyte.kobweb:kobweb-core "                                        , version.ref = "kobweb" }
kobweb-silk                          = { module = "com.varabyte.kobweb:kobweb-silk"                                         , version.ref = "kobweb" }
kobwebx-markdown                     = { module = "com.varabyte.kobwebx:kobwebx-markdown"                                   , version.ref = "kobweb" }
kobwebx-serialization                = { module = "com.varabyte.kobwebx:kobwebx-serialization-kotlinx"                      , version.ref = "kobweb" }
silk-foundation                      = { module = "com.varabyte.kobweb:silk-foundation"                                     , version.ref = "kobweb" }
silk-icons-fa                        = { module = "com.varabyte.kobwebx:silk-icons-fa"                                      , version.ref = "kobweb" }
silk-icons-mdi                       = { module = "com.varabyte.kobwebx:silk-icons-mdi"                                     , version.ref = "kobweb" }

# Native
kfswatch                             = { module = "io.github.irgaly.kfswatch:kfswatch"                                      , version.ref = "kfswatch" }
kmp-process                          = { module = "io.matthewnelson.kmp-process:process"                                    , version.ref = "kmp-process" }
log4k-coroutines                     = { module = "io.github.smyrgeorge:log4k-coroutines"                                   , version.ref = "log4k" }
log4k-slf4j                          = { module = "io.github.smyrgeorge:log4k-slf4j"                                        , version.ref = "log4k" }
rwmutex                              = { module = "com.mayakapps.rwmutex:rwmutex"                                           , version.ref = "rwmutex" }
kmbed-runtime                        = { module = "io.karma.kmbed:kmbed-runtime"                                            , version.ref = "kmbed" }

# Wasm
chicory                              = { module = "com.dylibso.chicory:runtime"                                             , version.ref = "chicory" }
chicory-bom                          = { module = "com.dylibso.chicory:bom"                                                 , version.ref = "chicory" }
chicory-aot                          = { module = "com.dylibso.chicory:aot-experimental"                                    , version.ref = "chicory" }
chicory-hostmodule-annproc           = { module = "com.dylibso.chicory:host-module-annotations-experimental"                , version.ref = "chicory" }
chicory-wasi                         = { module = "com.dylibso.chicory:wasi"                                                , version.ref = "chicory" }
chicory-simd                         = { module = "com.dylibso.chicory:simd"                                                , version.ref = "chicory" }
chasm                                = { module = "io.github.charlietap.chasm:chasm"                                        , version.ref = "chasm" }
weh-chasm-wasip1                     = { module = "at.released.weh:bindings-chasm-wasip1"                                   , version.ref = "weh-bindings" }
weh-chasm-emscripten                 = { module = "at.released.weh:bindings-chasm-emscripten"                               , version.ref = "weh-bindings" }
weh-chicory-wasip1                   = { module = "at.released.weh:bindings-chicory-wasip1"                                 , version.ref = "weh-bindings" }
weh-chicory-emscripten               = { module = "at.released.weh:bindings-chicory-emscripten"                             , version.ref = "weh-bindings" }

# AI/ML
langchain4j                          = { module = "dev.langchain4j:langchain4j"                                             , version.ref = "langchain4j" }
langchain4j-jlama                    = { module = "dev.langchain4j:langchain4j-jlama"                                       , version.ref = "langchain4j" }
jlama-core                           = { module = "com.github.tjake:jlama-core"                                             , version.ref = "jlama" }
jlama-native                         = { module = "com.github.tjake:jlama-native"                                           , version.ref = "jlama" }
dflib                                = { module = "org.dflib:dflib"                                                         , version.ref = "dflib" }
mcp-kotlin                           = { module = "io.modelcontextprotocol:kotlin-sdk"                                      , version.ref = "mcp-kotlin"}
ozone-bluesky                        = { module = "sh.christian.ozone:bluesky"                                              , version.ref = "bluesky-ozone"}
ozone-jetstream                      = { module = "sh.christian.ozone:jetstream"                                            , version.ref = "bluesky-ozone"}

# Misc
ldaptive                             = { module = "org.ldaptive:ldaptive"                                                   , version.ref = "ldaptive" }

# Maven Plugin
maven-plugin-api                     = { module = "org.apache.maven:maven-plugin-api"                                       , version.ref = "maven-plugin-api" }
maven-plugin-annotations             = { module = "rg.apache.maven.plugin-tools:maven-plugin-annotations"                   , version.ref = "maven-plugin-annotations" }

[bundles]
ajalt                                = ["ajalt-colormath",
                                        "ajalt-mordant",
                                        "ajalt-mordant-coroutines",
                                        "ajalt-mordant-markdown",
                                        "ajalt-clikt-core",
                                        "ajalt-clikt",
                                        "ajalt-clikt-markdown"]
dataviz                              = ["kotlinx-dataframe-csv",
                                        "kotlinx-dataframe-jdbc",
                                        "kotlinx-dataframe-geo",
                                        "kotlinx-kandy",
                                        "kotlinx-kandy-geo"]
json-extra                           = ["kotlinx-jsonpath","json-schema-validator"]
keystore                             = ["sslcontext-kickstart","directory-keystore"]
otel                                 = ["otel-instr-annotations",
                                        "otel-autoconfigure",
                                        "otel-semconv",
                                        "otel-instr-ktor",
                                        "otel-instr-logback-mdc",
                                        "otel-instr-logback-appender"]
otel-agent-extn                      = ["otel-instr-api",
                                        "otel-instr-extension-api"]


[plugins]
kotlin-multiplatform                 = { id = "org.jetbrains.kotlin.multiplatform"                             , version.ref = "kotlin"}
kotlinx-serialization                = { id = "org.jetbrains.kotlin.plugin.serialization"                      , version.ref = "kotlin"}
kotlin-powerassert                   = { id = "org.jetbrains.kotlin.plugin.power-assert"                       , version.ref = "kotlin"}
kotlin-allopen                       = { id = "org.jetbrains.kotlin.plugin.allopen"                            , version.ref = "kotlin"}
kotlin-noarg                         = { id = "org.jetbrains.kotlin.plugin.noarg"                              , version.ref = "kotlin"}
kotlin-atomicfu                      = { id = "org.jetbrains.kotlin.plugin.atomicfu"                           , version.ref = "kotlin"}
kotlin-js-plainobjects               = { id = "org.jetbrains.kotlin.plugin.js-plain-objects"                   , version.ref = "kotlin"}
kotlin-compose-compiler              = { id = "org.jetbrains.kotlin.plugin.compose"                            , version.ref = "kotlin"}
kotlin-dsl                           = { id = "org.gradle.kotlin.kotlin-dsl"                                   , version.ref = "gradle-kotlin-dsl"}
kotlin-ksp                           = { id = "com.google.devtools.ksp"                                        , version.ref = "kotlin-ksp"}
kotlinx-atomicfu                     = { id = "org.jetbrains.kotlinx.atomicfu"                                 , version.ref = "kotlinx-atomicfu"}
kotlinx-benchmark                    = { id = "org.jetbrains.kotlinx.benchmark"                                , version.ref = "kotlinx-benchmark" }
kotlinx-fuzz                         = { id = "kotlinx.fuzz.gradle"                                            , version.ref = "kotlinx-fuzz" }
kotlinx-rpc                          = { id = "org.jetbrains.kotlinx.rpc.plugin"                               , version.ref = "kotlinx-rpc" }
kotlinx-bcv                          = { id = "org.jetbrains.kotlinx.binary-compatibility-validator"           , version.ref = "kotlinx-bcv"}
kotlinx-kover                        = { id = "org.jetbrains.kotlinx.kover"                                    , version.ref = "kotlinx-kover" }
jetbrains-compose                    = { id = "org.jetbrains.compose"                                          , version.ref = "jetbrains-compose"}
jetbrains-compose-hotreload          = { id = "org.jetbrains.compose.hot-reload"                               , version.ref = "compose-hotreload"}
jetbrains-ktor                       = { id = "io.ktor.plugin"                                                 , version.ref = "ktor" }
jetbrains-exposed                    = { id = "com.jetbrains.exposed.gradle.plugin"                            , version.ref = "exposed-plugin" }
jetbrains-dokka                      = { id = "org.jetbrains.dokka"                                            , version.ref = "kotlin-dokka"}
decoroutinator                       = { id = "dev.reformator.stacktracedecoroutinator"                        , version.ref = "decoroutinator"}
graalvm-nativeimage                  = { id = "org.graalvm.buildtools.native"                                  , version.ref = "graalvm-nativeimage"}
serviceloader-compiler               = { id = "app.softwork.serviceloader-compiler"                            , version.ref = "kotlin-serviceloader" }
kopy                                 = { id = "com.javiersc.kotlin.kopy"                                       , version.ref = "kopy"}
semver                               = { id = "com.javiersc.semver"                                            , version.ref = "semver-plugin" }
redacted                             = { id = "dev.zacsweers.redacted"                                         , version.ref = "kotlin-redacted"}
metro                                = { id = "dev.zacsweers.metro"                                            , version.ref = "metro"}
gradle-develocity                    = { id = "com.gradle.develocity"                                          , version.ref = "gradle-develocity" }
mrjar                                = { id = "me.champeau.mrjar"                                              , version.ref = "mrjar"}
nexus-publish                        = { id = "io.github.gradle-nexus.publish-plugin"                          , version.ref = "nexus-publish"}
jte                                  = { id = "gg.jte.gradle"                                                  , version.ref = "jte" }
benmanes                             = { id = "com.github.ben-manes.versions"                                  , version.ref = "benmanes" }
spotless                             = { id = "com.diffplug.spotless"                                          , version.ref = "spotless" }
shadow                               = { id = "com.gradleup.shadow"                                            , version.ref = "shadow" }
jib                                  = { id = "com.google.cloud.tools.jib"                                     , version.ref = "jib-plugin" }
sigstore                             = { id = "dev.sigstore.sign"                                              , version.ref = "sigstore" }
sigstore-base                        = { id = "dev.sigstore.sign-base"                                         , version.ref = "sigstore" }
buildkonfig                          = { id = "com.codingfeline.buildkonfig"                                   , version.ref = "buildkonfig"}
detekt                               = { id = "io.github.detekt.gradle.compiler-plugin"                        , version.ref = "detekt"}
nmcp                                 = { id = "com.gradleup.nmcp"                                              , version.ref = "nmcp"}
vanniktech-publish                   = { id = "com.vanniktech.maven.publish"                                   , version.ref = "vanniktech-publish" }
gradle-publish                       = { id = "com.gradle.plugin-publish"                                      , version.ref = "gradle-publish" }
kobweb-application                   = { id = "com.varabyte.kobweb.application"                                , version.ref = "kobweb" }
kobweb-library                       = { id = "com.varabyte.kobweb.library"                                    , version.ref = "kobweb" }
kobwebx-markdown                     = { id = "com.varabyte.kobwebx.markdown"                                  , version.ref = "kobweb" }
kobwebx-worker                       = { id = "com.varabyte.kobweb.worker"                                     , version.ref = "kobweb" }
spring-boot                          = { id = "org.springframework.boot"                                       , version.ref = "spring-boot" }
spring-depmgmt                       = { id = "io.spring.dependency-management"                                , version.ref = "spring-depmgmt" }
mappie                               = { id = "tech.mappie.plugin"                                             , version.ref = "mappie" }
poko                                 = { id = "dev.drewhamilton.poko"                                          , version.ref = "poko" }
animalsniffer                        = { id = "ru.vyarus.animalsniffer"                                        , version.ref = "animalsniffer"}
build-vercraft                       = { id = "com.akuleshov7.vercraft.plugin-gradle"                          , version.ref = "vercraft" }
kmbed-plugin                         = { id = "io.karma.kmbed.kmbed-gradle-plugin"                             , version.ref = "kmbed" }
badass-jlink                         = { id = "com.dua3.gradle.jlink"                                          , version.ref = "badass-jlink" }
badass-runtime                       = { id = "com.dua3.gradle.runtime"                                        , version.ref = "badass-runtime" }
jlink-jib                            = { id = "com.ryandens.jlink-jib"                                         , version.ref = "jlink-jib" }
gradlex-maven-plugin                 = { id = "org.gradlex.maven-plugin-development"                           , version.ref = "gradlex-maven-plugin" }
typesafe-conventions                 = { id = "dev.panuszewski.typesafe-conventions"                           , version.ref = "typesafe-conventions" }
wasm2class                           = { id = "at.released.wasm2class.plugin"                                  , version.ref = "wasm2class" }
mcp4k                                = { id = "sh.ondr.mcp4k"                                                  , version.ref = "mcp4k"}
tasktree                             = { id = "com.dorongold.task-tree"                                        , version.ref = "tasktree" }
foojay-resolver                      = { id = "org.gradle.toolchains.foojay-resolver"                          , version.ref = "foojay-resolver" }
gratatouille                         = { id = "com.gradleup.gratatouille"                                      , version.ref = "gratatouille" }
cyclonedx                            = { id = "org.cyclonedx.cyclonedx"                                        , version.ref = "cyclonedx-plugin" }
github-depgraph                      = { id = "org.gradle.github-dependency-graph"                             , version.ref = "github-depgraph"}
wire                                 = { id = "com.squareup.wire"                                              , version.ref = "wire-plugin"}
gmazzo-buildconfig                   = { id = "com.github.gmazzo.buildconfig"                                  , version.ref = "gmazzo-buildconfig"}
mokkery                              = { id = "dev.mokkery"                                                    , version.ref = "mokkery"}
modulegraph                          = { id = "dev.iurysouza.modulegraph"                                      , version.ref = "modulegraph"}
npm-publish                          = { id = "dev.petuska.npm.publish"                                        , version.ref = "npm-publish-plugin"}
intellij-coverage                    = { id = "org.jetbrains.intellij.deps.coverage"                           , version.ref = "intellij-coverage" }
github-changelog                     = { id = "org.hildan.github.changelog"                                    , version.ref = "github-changelog" }
includegit                           = { id = "me.champeau.gradle.includegit"                                  , version.ref = "includegit-plugin" }
reproducible-builds                  = { id = "org.gradlex.reproducible-builds"                                , version.ref = "reproducible-builds" }
autonomousapps-depanalysis           = { id = "com.autonomousapps.dependency-analysis"                         , version.ref = "autonomousapps-depanalysis" }
autonomousapps-bestpractices         = { id = "com.autonomousapps.plugin-best-practices-plugin"                , version.ref = "autonomousapps-bestpractices" }

# Common build and settings plugins
project-root                         = { id = "dev.suresh.plugin.root"                                         , version.ref = "bc-plugins" }
project-common                       = { id = "dev.suresh.plugin.common"                                       , version.ref = "bc-plugins" }
project-graalvm                      = { id = "dev.suresh.plugin.graalvm"                                      , version.ref = "bc-plugins" }
project-kotlin-jvm                   = { id = "dev.suresh.plugin.kotlin.jvm"                                   , version.ref = "bc-plugins" }
project-kotlin-mpp                   = { id = "dev.suresh.plugin.kotlin.mpp"                                   , version.ref = "bc-plugins" }
project-kotlin-docs                  = { id = "dev.suresh.plugin.kotlin.docs"                                  , version.ref = "bc-plugins" }
project-kotlin-benchmark             = { id = "dev.suresh.plugin.kotlin.benchmark"                             , version.ref = "bc-plugins" }
project-publishing                   = { id = "dev.suresh.plugin.publishing"                                   , version.ref = "bc-plugins" }
settings-repos                       = { id = "dev.suresh.plugin.repos"                                        , version.ref = "bc-plugins" }
settings-catalog                     = { id = "dev.suresh.plugin.catalog"                                      , version.ref = "bc-plugins" }