name: Build

on:
  push:
    branches:
      - main
    tags:
      - '*'
    paths-ignore:
      - LICENSE
      - '*.md'
      - 'docs/**'
      - '.github/config/labels.yml'
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  releaseBuild: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}

jobs:
  build:
    name: 🏗️ Gradle Build
    permissions:
      contents: write
      packages: write
      discussions: write
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        jdk: [ ea ]

    runs-on: ${{ matrix.os }}
    continue-on-error: false

    steps:
      - name: 🛎️ Check out the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ⬇️ Download OpenJDK ${{ matrix.jdk }} latest build from ☁️jdk.java.net
        id: download-jdk
        uses: oracle-actions/setup-java@main
        with:
          website: jdk.java.net
          release: ${{ matrix.jdk }}
          version: latest
          install: false

      - name: ☕ Set up OpenJDK ${{ matrix.jdk }}
        id: setup-java
        uses: actions/setup-java@v3
        if: always() && steps.download-jdk.outcome == 'success'
        with:
          distribution: jdkfile
          java-version: ${{ steps.download-jdk.outputs.version }}
          jdkFile: ${{ steps.download-jdk.outputs.archive }}
          cache: 'gradle'

      - name: 🏗️ Gradle Build & Run
        id: gradle-build
        run: |
          ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}

      - name: 📤 Uploading ${{ matrix.os }} executable jar
        if: steps.gradle-build.outcome == 'success' && runner.os == 'XLinux'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.gradle-build.outputs.appjar_name }}
          path: |
            ${{ steps.gradle-build.outputs.appjar_path }}
          if-no-files-found: error

      - name: 🚀 Deploy html docs to 🕸️website
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'XLinux'
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        with:
          branch: main
          folder: build/dokka
          target-folder: docs/apidoc/
          clean: true
          commit-message: 'doc: Deployed dokka website'

      - name: 🏖️ Deploy coverage report to website
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'XLinux'
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        with:
          branch: main
          folder: build/reports
          target-folder: docs/reports/
          clean: true
          commit-message: 'doc: Deployed coverage report'

      - name: 📌 Push the changes to Github
        if: ${{ false }}
        id: push-to-github
        run: |
          # date > generated.txt
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          # git commit -m "doc: Update generated.txt" || exit 0
          if [ -z "$(git status --porcelain)" ]; then
            echo 'No changes detected.'
            exit 0
          else
            git commit --message "doc: Update generated.txt"
            git push
            # git push origin HEAD:${{ github.event.repository.default_branch }}
          fi